version: "3"
networks:
  hocus_net:
volumes:
  db_data:
  db_init:
  agent_data:
services:
  setup-keycloak:
    restart: "no"
    environment:
      - OIDC_CALLBACK_URL=http://${HOCUS_HOSTNAME}:3000/app/callback
      - OIDC_POST_LOGOUT_REDIRECT=http://${HOCUS_HOSTNAME}:3000/
    command: >
      bash -o errexit -o nounset -o pipefail -o xtrace -c '
        cp ops/docker/resources/keycloak-setup.sh /db_init/keycloak-setup.sh && \
        sed -i -e "/-- SQL_DB_DUMP_GOES_HERE/r ops/docker/resources/keycloak-db-dump.sql" /db_init/keycloak-setup.sh && \
        sed -i \
          "s/github_client_secret_goes_here/${GITHUB_APP_HOCUS_DEV_CLIENT_SECRET}/g" \
          /db_init/keycloak-setup.sh && \
        sed -i \
          "s@hocus_callback_url_goes_here@$${OIDC_CALLBACK_URL}@g" \
          /db_init/keycloak-setup.sh && \
        sed -i \
          "s@hocus_logout_redirect_url_goes_here@$${OIDC_POST_LOGOUT_REDIRECT}@g" \
          /db_init/keycloak-setup.sh && \
        chmod +x /db_init/keycloak-setup.sh
      '
    volumes:
      - db_init:/db_init:rw

  db:
    image: "postgres:15.2-alpine"
    restart: unless-stopped
    depends_on:
      setup-keycloak:
        condition: service_completed_successfully
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: rooms
      PGDATA: /data
    ports:
      - "${NO_EXPOSE_PORTS-5432:}5432"
    networks:
      - hocus_net
    volumes:
      - db_init:/docker-entrypoint-initdb.d/:ro
      - db_data:/data:rw
    healthcheck:
      test: ["CMD-SHELL", "psql -U ${POSTGRES_USER} -lqt | cut -d \\| -f 1 | grep -qw temporal"]
      interval: 1s
      timeout: 10s
      retries: 30

  keycloak:
    depends_on:
      db:
        condition: service_healthy
    command: "start"
    restart: unless-stopped
    networks:
      - hocus_net
    environment:
      - KC_HOSTNAME=${HOCUS_HOSTNAME}:4200
      - KC_DB_URL=jdbc:postgresql://db:5432/keycloak
      - KC_DB_USERNAME=${POSTGRES_USER}
      - KC_DB_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${NO_EXPOSE_PORTS-4200:}8080"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]
      interval: 10s
      timeout: 1m
      retries: 10

  temporal:
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=db
      - POSTGRES_DB=temporal
      #- DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development_es.yaml
    image: temporalio/auto-setup:1.20.0
    restart: unless-stopped
    networks:
      - hocus_net
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "h"]
      interval: 10s
      timeout: 1m
      retries: 10

  temporal-admin-tools:
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    networks:
      - hocus_net
    image: temporalio/admin-tools:1.20.0
    stdin_open: true
    tty: true

  temporal-ui:
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_PERMIT_WRITE_API=true
      - TEMPORAL_UI_ENABLED=true
      - TEMPORAL_OPENAPI_ENABLED=true
      - TEMPORAL_CODEC_ENDPOINT=http://${HOCUS_HOSTNAME}:8081
    image: temporalio/ui:2.14.0
    networks:
      - hocus_net
    ports:
      - "${NO_EXPOSE_PORTS-8080:}8080"

  temporal-hocus-codec:
    environment:
      - PORT=8081
    networks:
      - hocus_net
    ports:
      - "${NO_EXPOSE_PORTS-8081:}8081"

  hocus-ui:
    depends_on:
      db:
        condition: service_healthy
      temporal:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - LOG_LEVEL=info
      - OIDC_ISSUER_BASE_URL=http://keycloak:8080/realms/hocus
      - OIDC_BASE_URL=http://${HOCUS_HOSTNAME}:3000/app
      - OIDC_CLIENT_ID=hocus
      - OIDC_CLIENT_SECRET=dev-client-secret
      - OIDC_SECRET=LONG_RANDOM_VALUE
      - OIDC_POST_LOGOUT_REDIRECT=http://${HOCUS_HOSTNAME}:3000/
      - CONTROL_PLANE_AGENT_HOSTNAME=${HOCUS_HOSTNAME}
      - TEMPORAL_SERVER_URL=temporal:7233
      - PRISMA_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/rooms?schema=public
      - TELEMETRY_DISABLED=${TELEMETRY_DISABLED:-}
      - DEPLOY_ID=${DEPLOY_ID:-}
      - INIT_CONFIG_LOAD_ENABLED=${INIT_CONFIG_DIR_PATH:-}
      - INIT_CONFIG_DUMP_ENABLED=${INIT_CONFIG_DIR_PATH:-}
    volumes:
      # this volume only needs to be set up if you are using an init config, which is
      # a feature targeted towards developers working on Hocus itself
      - ${INIT_CONFIG_DIR_PATH:-/tmp/hocus-init-config-placeholder}:/hocus-init
    ports:
      - "${NO_EXPOSE_PORTS-3000:}3000"
    networks:
      - hocus_net
    healthcheck:
      test: ["CMD-SHELL", "curl --head --fail localhost:3000 || exit 1"]
      interval: 1s
      timeout: 10s
      retries: 30

  hocus-agent:
    depends_on:
      db:
        condition: service_healthy
      temporal:
        condition: service_healthy
      hocus-ui:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - LOG_LEVEL=info
      - AGENT_TEMPORAL_ADDRESS=temporal:7233
      - AGENT_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/rooms?schema=public
      - TELEMETRY_DISABLED=${TELEMETRY_DISABLED:-}
      - DEPLOY_ID=${DEPLOY_ID:-}
      - AGENT_KERNEL_PATH=/kernel/vmlinux-6.2-x86_64.bin
      - AGENT_INITRD_PATH=/kernel/initrd.img
      - AGENT_HOST_BUILDFS_RESOURCES_DIR=/app/resources
      - AGENT_DEV_CREATE_HOCUS_PROJECTS=${AGENT_DEV_CREATE_HOCUS_PROJECTS}
      - AGENT_DEV_CREATE_DEVELOPMENT_PROJECTS=${AGENT_DEV_CREATE_DEVELOPMENT_PROJECTS}
      - HOCUS_REPO_PRIVATE_KEY=${HOCUS_REPO_PRIVATE_KEY}
      - HOCUS_DEV_GIT_NAME=${HOCUS_DEV_GIT_NAME}
      - HOCUS_DEV_GIT_EMAIL=${HOCUS_DEV_GIT_EMAIL}
      - CONTROL_PLANE_AGENT_HOSTNAME=${HOCUS_HOSTNAME}
    networks:
      - hocus_net
    privileged: true
    ports:
      - "${NO_EXPOSE_PORTS-8822:}22"
    volumes:
      - agent_data:/srv/jailer:rw
      - /dev/kvm:/dev/kvm
      - /dev:/dev/hocus
      # used by setup-tcmu.sh
      - /lib/modules:/lib/modules:ro
    healthcheck:
      # Use the mtime of the file in /run
      # /tmp is not guaranteed to be a tmpfs, atime is not used due to the possibility of noatime being enabled
      test:
        [
          "CMD-SHELL",
          "if [ `stat -c %Y /run/.hocus-agent-healthcheck` -ge `date +%s -d'5 seconds ago'` ]; then exit 0; else exit 1; fi",
        ]
      interval: 1s
      timeout: 10s
      retries: 30
