// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id            BigInt             @id @default(autoincrement())
  externalId    String             @unique
  gaUserId      String             @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  gitConfig     UserGitConfig      @relation(fields: [gitConfigId], references: [id])
  gitConfigId   BigInt
  workspaces    Workspace[]
  sshPublicKeys UserSSHPublicKey[]
  active        Boolean

  createdAt                         DateTime                            @default(now()) @db.Timestamptz(3)
  UserProjectEnvironmentVariableSet UserProjectEnvironmentVariableSet[]
}

model UserSSHPublicKey {
  id         BigInt @id @default(autoincrement())
  externalId String @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String
  userId     BigInt
  user       User   @relation(fields: [userId], references: [id])
  publicKey  String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
}

enum LogGroupType {
  LOG_GROUP_TYPE_VM_TASK
}

model LogGroup {
  id      BigInt       @id @default(autoincrement())
  type    LogGroupType
  logs    Log[]
  vmTasks VmTask[]
}

model Log {
  id         BigInt   @id @default(autoincrement())
  logGroup   LogGroup @relation(fields: [logGroupId], references: [id])
  logGroupId BigInt
  idx        Int
  content    Bytes

  @@unique([logGroupId, idx], name: "log_log_event_id_idx_unique")
}

enum PrebuildEventStatus {
  PREBUILD_EVENT_STATUS_PENDING_INIT
  PREBUILD_EVENT_STATUS_PENDING_READY
  PREBUILD_EVENT_STATUS_RUNNING
  PREBUILD_EVENT_STATUS_SUCCESS
  PREBUILD_EVENT_STATUS_ERROR
  PREBUILD_EVENT_STATUS_CANCELLED
  PREBUILD_EVENT_STATUS_PENDING_ARCHIVE
  PREBUILD_EVENT_STATUS_ARCHIVED
}

model PrebuildEvent {
  id                    BigInt              @id @default(autoincrement())
  externalId            String              @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tasks                 PrebuildEventTask[]
  project               Project             @relation(fields: [projectId], references: [id])
  projectId             BigInt
  gitObject             GitObject           @relation(fields: [gitObjectId], references: [id])
  gitObjectId           BigInt
  status                PrebuildEventStatus
  buildfsEventId        BigInt?
  /// Null if project configuration was not found or did not include image config.
  buildfsEvent          BuildfsEvent?       @relation(fields: [buildfsEventId], references: [id])
  // Nah, until https://github.com/prisma/prisma/issues/4263 gets fixed then just leave it...
  workspaceTasksCommand String[]
  workspaceTasksShell   String[]
  workflowId            String              @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  archiveAfter             DateTime                   @default(now()) @db.Timestamptz(3)
  createdAt                DateTime                   @default(now()) @db.Timestamptz(3)
  prebuildEventImages      PrebuildEventImages[]
  workspaces               Workspace[]
  reservations             PrebuildEventReservation[]
  /// Set if the prebuild failed because an error occurred within the application itself.
  PrebuildEventSystemError PrebuildEventSystemError?
}

model PrebuildEventSystemError {
  id              BigInt        @id @default(autoincrement())
  prebuildEvent   PrebuildEvent @relation(fields: [prebuildEventId], references: [id])
  prebuildEventId BigInt        @unique
  message         String

  occurredAt DateTime @default(now()) @db.Timestamptz(3)
}

model PrebuildEventImages {
  id              BigInt        @id @default(autoincrement())
  prebuildEvent   PrebuildEvent @relation(fields: [prebuildEventId], references: [id])
  prebuildEventId BigInt
  fsImage         LocalOciImage @relation("prebuild_event_fs_image", fields: [fsImageId], references: [id])
  fsImageId       BigInt
  projectImage    LocalOciImage @relation("prebuild_event_project_image", fields: [projectImageId], references: [id])
  projectImageId  BigInt
  agentInstance   AgentInstance @relation(fields: [agentInstanceId], references: [id])
  agentInstanceId BigInt

  /// Enforce that agentInstanceId and fsImage.agentInstanceId are the same.
  fsImageAgentMatch      LocalOciImage @relation("prebuild_event_fs_image_agent_match", fields: [fsImageId, agentInstanceId], references: [id, agentInstanceId])
  /// Enforce that agentInstanceId and projectImage.agentInstanceId are the same.
  projectImageAgentMatch LocalOciImage @relation("prebuild_event_project_image_agent_match", fields: [projectImageId, agentInstanceId], references: [id, agentInstanceId])

  @@unique([prebuildEventId, agentInstanceId])
}

model PrebuildEventTask {
  id              BigInt        @id @default(autoincrement())
  idx             Int
  prebuildEvent   PrebuildEvent @relation(fields: [prebuildEventId], references: [id])
  prebuildEventId BigInt
  vmTask          VmTask        @relation(fields: [vmTaskId], references: [id])
  vmTaskId        BigInt
  originalCommand String
}

enum PrebuildEventReservationType {
  PREBUILD_EVENT_RESERVATION_TYPE_CREATE_WORKSPACE
  PREBUILD_EVENT_RESERVATION_TYPE_ARCHIVE_PREBUILD
}

model PrebuildEventReservation {
  id              BigInt                       @id @default(autoincrement())
  externalId      String                       @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  prebuildEvent   PrebuildEvent                @relation(fields: [prebuildEventId], references: [id])
  prebuildEventId BigInt
  validUntil      DateTime                     @db.Timestamptz(3)
  createdAt       DateTime                     @default(now()) @db.Timestamptz(3)
  type            PrebuildEventReservationType
}

enum VmTaskStatus {
  VM_TASK_STATUS_PENDING
  VM_TASK_STATUS_RUNNING
  VM_TASK_STATUS_SUCCESS
  VM_TASK_STATUS_ERROR
  VM_TASK_STATUS_CANCELLED
}

model VmTask {
  id                 BigInt              @id @default(autoincrement())
  externalId         String              @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  command            String[]
  cwd                String
  status             VmTaskStatus
  logGroup           LogGroup            @relation(fields: [logGroupId], references: [id])
  logGroupId         BigInt
  prebuildEventTasks PrebuildEventTask[]
  buildfsEvents      BuildfsEvent[]
}

model BuildfsEvent {
  id                 BigInt               @id @default(autoincrement())
  vmTask             VmTask               @relation(fields: [vmTaskId], references: [id])
  vmTaskId           BigInt
  /// Relative path to the Dockerfile in the `project` directory of the input drive.
  dockerfilePath     String
  /// Relative path to the build context in the `project` directory of the input drive.
  contextPath        String
  cacheHash          String
  projectId          BigInt
  project            Project              @relation(fields: [projectId], references: [id])
  buildfsEventImages BuildfsEventImages[]
  prebuildEvents     PrebuildEvent[]

  @@index([cacheHash])
}

model BuildfsEventImages {
  id              BigInt        @id @default(autoincrement())
  buildfsEvent    BuildfsEvent  @relation(fields: [buildfsEventId], references: [id])
  buildfsEventId  BigInt
  outputImage     LocalOciImage @relation("buildfs_event_output_image", fields: [outputImageId], references: [id])
  outputImageId   BigInt
  agentInstance   AgentInstance @relation(fields: [agentInstanceId], references: [id])
  agentInstanceId BigInt

  /// Enforce that agentInstanceId and outputImage.agentInstanceId are the same.
  outputImageAgentMatch LocalOciImage @relation("buildfs_event_output_image_agent_match", fields: [outputImageId, agentInstanceId], references: [id, agentInstanceId])

  @@unique([buildfsEventId, agentInstanceId])
}

enum SshKeyPairType {
  SSH_KEY_PAIR_TYPE_SERVER_CONTROLLED
  SSH_KEY_PAIR_TYPE_USER_SUPPLIED
}

model SshKeyPair {
  id              BigInt          @id @default(autoincrement())
  type            SshKeyPairType
  privateKey      String
  publicKey       String
  gitRepositories GitRepository[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
}

model GitRepository {
  id           BigInt      @id @default(autoincrement())
  url          String      @unique
  sshKeyPair   SshKeyPair  @relation(fields: [sshKeyPairId], references: [id])
  sshKeyPairId BigInt
  gitBranches  GitBranch[]

  lastBranchUpdateAt            DateTime                        @default(now()) @db.Timestamptz(3)
  createdAt                     DateTime                        @default(now()) @db.Timestamptz(3)
  Project                       Project[]
  GitRepositoryConnectionStatus GitRepositoryConnectionStatus[]
  GitRepositoryImage            GitRepositoryImage[]
}

model GitRepositoryImage {
  id              BigInt        @id @default(autoincrement())
  gitRepository   GitRepository @relation(fields: [gitRepositoryId], references: [id])
  gitRepositoryId BigInt
  localOciImage   LocalOciImage @relation(fields: [localOciImageId], references: [id])
  localOciImageId BigInt
  agentInstance   AgentInstance @relation(fields: [agentInstanceId], references: [id])
  agentInstanceId BigInt

  /// Enforce that agentInstanceId and localOciImage.agentInstanceId are the same.
  imageAgentMatch LocalOciImage @relation("git_repository_image_agent_match", fields: [localOciImageId, agentInstanceId], references: [id, agentInstanceId])

  createdAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([gitRepositoryId, localOciImageId])
  @@unique([gitRepositoryId, agentInstanceId])
}

model GitRepositoryConnectionStatus {
  id                         BigInt        @id @default(autoincrement())
  gitRepositoryId            BigInt        @unique
  gitRepository              GitRepository @relation(fields: [gitRepositoryId], references: [id])
  lastSuccessfulConnectionAt DateTime?     @db.Timestamptz(3)

  createdAt DateTime                       @default(now()) @db.Timestamptz(3)
  errors    GitRepositoryConnectionError[]
}

model GitRepositoryConnectionError {
  id                 BigInt                        @id @default(autoincrement())
  connectionStatusId BigInt
  connectionStatus   GitRepositoryConnectionStatus @relation(fields: [connectionStatusId], references: [id])
  error              String

  createdAt DateTime @default(now()) @db.Timestamptz(3)

  @@index([connectionStatusId, createdAt])
}

model GitBranch {
  id              BigInt        @id @default(autoincrement())
  externalId      String        @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String
  gitRepository   GitRepository @relation(fields: [gitRepositoryId], references: [id])
  gitRepositoryId BigInt
  gitObjectId     BigInt
  gitObject       GitObject     @relation(fields: [gitObjectId], references: [id])

  updatedAt         DateTime            @updatedAt @db.Timestamptz(3)
  createdAt         DateTime            @default(now()) @db.Timestamptz(3)
  Workspace         Workspace[]
  GitObjectToBranch GitObjectToBranch[]

  @@unique([gitRepositoryId, name])
}

model GitObject {
  id   BigInt @id @default(autoincrement())
  hash String @unique

  createdAt         DateTime            @default(now()) @db.Timestamptz(3)
  gitBranches       GitBranch[]
  PrebuildEvent     PrebuildEvent[]
  gitObjectToBranch GitObjectToBranch[]
}

model GitObjectToBranch {
  id          BigInt    @id @default(autoincrement())
  gitObject   GitObject @relation(fields: [gitObjectId], references: [id])
  gitObjectId BigInt
  gitBranch   GitBranch @relation(fields: [gitBranchId], references: [id])
  gitBranchId BigInt

  @@unique([gitObjectId, gitBranchId])
}

model Project {
  id                                      BigInt                 @id @default(autoincrement())
  externalId                              String                 @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                                    String
  gitRepository                           GitRepository          @relation(fields: [gitRepositoryId], references: [id])
  gitRepositoryId                         BigInt
  /// relative path to the directory where the `hocus.yml` file is located
  rootDirectoryPath                       String
  environmentVariableSetId                BigInt
  environmentVariableSet                  EnvironmentVariableSet @relation(fields: [environmentVariableSetId], references: [id])
  archivablePrebuildsMonitoringWorkflowId String                 @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  maxPrebuildRamMib                       Int
  maxPrebuildVCPUCount                    Int
  maxWorkspaceRamMib                      Int
  maxWorkspaceVCPUCount                   Int

  createdAt                         DateTime                            @default(now()) @db.Timestamptz(3)
  prebuildEvents                    PrebuildEvent[]
  buildfsEvents                     BuildfsEvent[]
  UserProjectEnvironmentVariableSet UserProjectEnvironmentVariableSet[]
}

model AgentInstance {
  id         BigInt      @id @default(autoincrement())
  externalId String      @unique
  workspaces Workspace[]

  createdAt           DateTime              @default(now()) @db.Timestamptz(3)
  localOciImages      LocalOciImage[]
  buildfsEventImages  BuildfsEventImages[]
  GitRepositoryImage  GitRepositoryImage[]
  PrebuildEventImages PrebuildEventImages[]
}

model LocalOciImage {
  id              BigInt        @id @default(autoincrement())
  externalId      String        @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tag             String
  readonly        Boolean
  agentInstanceId BigInt
  agentInstance   AgentInstance @relation(fields: [agentInstanceId], references: [id])

  gitRepositoryImages                  GitRepositoryImage[]
  gitRepositoryMatchImages             GitRepositoryImage[]  @relation("git_repository_image_agent_match")
  prebuildEventFsImages                PrebuildEventImages[] @relation("prebuild_event_fs_image")
  prebuildEventProjectImages           PrebuildEventImages[] @relation("prebuild_event_project_image")
  prebuildEventFsAgentMatchImages      PrebuildEventImages[] @relation("prebuild_event_fs_image_agent_match")
  prebuildEventProjectAgentMatchImages PrebuildEventImages[] @relation("prebuild_event_project_image_agent_match")
  buildfsEventOutputImages             BuildfsEventImages[]  @relation("buildfs_event_output_image")
  buildfsEventOutputImageAgentMatch    BuildfsEventImages[]  @relation("buildfs_event_output_image_agent_match")
  workspacesRootFs                     Workspace[]           @relation("workspace_project_image")
  workspacesProject                    Workspace[]           @relation("workspace_root_fs_image")
  workspaceRootfsImageAgentMatch       Workspace[]           @relation("workspace_root_fs_image_agent_match")
  workspaceProjectImageAgentMatch      Workspace[]           @relation("workspace_project_image_agent_match")

  @@unique([agentInstanceId, id])
  @@unique([agentInstanceId, tag])
}

model EnvironmentVariable {
  id                       BigInt                 @id @default(autoincrement())
  externalId               String                 @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                     String
  value                    String
  environmentVariableSetId BigInt
  environmentVariableSet   EnvironmentVariableSet @relation(fields: [environmentVariableSetId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([environmentVariableSetId, name])
}

model EnvironmentVariableSet {
  id                                BigInt                              @id @default(autoincrement())
  environmentVariables              EnvironmentVariable[]
  projects                          Project[]
  createdAt                         DateTime                            @default(now()) @db.Timestamptz(3)
  UserProjectEnvironmentVariableSet UserProjectEnvironmentVariableSet[]
}

enum WorkspaceStatus {
  WORKSPACE_STATUS_PENDING_CREATE
  WORKSPACE_STATUS_STOPPED
  WORKSPACE_STATUS_STOPPED_WITH_ERROR
  WORKSPACE_STATUS_PENDING_START
  WORKSPACE_STATUS_STARTED
  WORKSPACE_STATUS_PENDING_STOP
  WORKSPACE_STATUS_PENDING_DELETE
}

model Workspace {
  id               BigInt             @id @default(autoincrement())
  externalId       String             @unique
  name             String
  userId           BigInt
  user             User               @relation(fields: [userId], references: [id])
  prebuildEventId  BigInt
  prebuildEvent    PrebuildEvent      @relation(fields: [prebuildEventId], references: [id])
  gitBranchId      BigInt
  gitBranch        GitBranch          @relation(fields: [gitBranchId], references: [id])
  rootFsImageId    BigInt
  rootFsImage      LocalOciImage      @relation("workspace_root_fs_image", fields: [rootFsImageId], references: [id])
  projectImageId   BigInt
  projectImage     LocalOciImage      @relation("workspace_project_image", fields: [projectImageId], references: [id])
  agentInstanceId  BigInt
  agentInstance    AgentInstance      @relation(fields: [agentInstanceId], references: [id])
  status           WorkspaceStatus
  activeInstanceId BigInt?
  activeInstance   WorkspaceInstance? @relation(fields: [activeInstanceId], references: [id])
  latestError      String?

  /// Enforce that agentInstanceId and rootFsImage.agentInstanceId are the same.
  rootFsImageAgentMatch  LocalOciImage @relation("workspace_root_fs_image_agent_match", fields: [rootFsImageId, agentInstanceId], references: [id, agentInstanceId])
  /// Enforce that agentInstanceId and projectImage.agentInstanceId are the same.
  projectImageAgentMatch LocalOciImage @relation("workspace_project_image_agent_match", fields: [projectImageId, agentInstanceId], references: [id, agentInstanceId])

  createdAt    DateTime @default(now()) @db.Timestamptz(3)
  lastOpenedAt DateTime @default(now()) @db.Timestamptz(3)

  @@index([activeInstanceId])
}

model WorkspaceInstance {
  id                   BigInt      @id @default(autoincrement())
  runtimeInstanceId    String
  vmIp                 String
  monitoringWorkflowId String
  workspaces           Workspace[]
}

model UserProjectEnvironmentVariableSet {
  id               BigInt                 @id @default(autoincrement())
  userId           BigInt
  user             User                   @relation(fields: [userId], references: [id])
  environmentSetId BigInt
  environmentSet   EnvironmentVariableSet @relation(fields: [environmentSetId], references: [id])
  projectId        BigInt
  project          Project                @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([userId, projectId])
}

model UserGitConfig {
  id          BigInt @id @default(autoincrement())
  gitUsername String
  gitEmail    String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  user User[]
}
